generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String              @id @default(cuid())
  email            String              @unique
  ipAddress        String?
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  rateLimit        RateLimit?
  subscription     Subscription?
  chatHistory      ChatHistory[]
  favoriteRepos    FavoriteRepository[]
}

model RateLimit {
  id           String   @id @default(cuid())
  userId       String   @unique
  messageCount Int      @default(0)
  lastReset    DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Subscription {
  id                   String   @id @default(cuid())
  userId               String   @unique
  isActive             Boolean  @default(false)
  stripeCustomerId     String?  @unique
  stripeSubscriptionId String?  @unique
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ChatHistory {
  id        String   @id @default(cuid())
  userId    String
  message   String
  role      String   // 'user' or 'assistant'
  repoUrl   String?  // The repository URL if the chat was about a specific repo
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model FavoriteRepository {
  id        String   @id @default(cuid())
  userId    String
  repoUrl   String   // Full GitHub repository URL
  name      String   // Repository name
  owner     String   // Repository owner
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, repoUrl])
}
